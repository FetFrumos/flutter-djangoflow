// Mocks generated by Mockito 5.3.2 from annotations
// in djangoflow_deep_link_interface/test/src/blocs/djangoflow_deep_link_cubit_base_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:djangoflow_deep_link_interface/src/blocs/djangoflow_deep_link_cubit_base.dart'
    as _i3;
import 'package:djangoflow_deep_link_interface/src/data/djangoflow_deep_link_repository_base.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDjangoflowDeepLinkRepositoryBase_0<T> extends _i1.SmartFake
    implements _i2.DjangoflowDeepLinkRepositoryBase<T> {
  _FakeDjangoflowDeepLinkRepositoryBase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DjangoflowDeepLinkCubitBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDjangoflowDeepLinkCubitBase extends _i1.Mock
    implements _i3.DjangoflowDeepLinkCubitBase<String> {
  @override
  _i2.DjangoflowDeepLinkRepositoryBase<String> get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDjangoflowDeepLinkRepositoryBase_0<String>(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub:
            _FakeDjangoflowDeepLinkRepositoryBase_0<String>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DjangoflowDeepLinkRepositoryBase<String>);
  @override
  _i4.Stream<String?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<String?>.empty(),
        returnValueForMissingStub: _i4.Stream<String?>.empty(),
      ) as _i4.Stream<String?>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void emit(String? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i5.Change<String?>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
