openapi: 3.0.3
info:
  title: Project API
  version: 0.0.1 (v1)
  description: description
paths:
  /api/v1/auth/otp/:
    post:
      operationId: auth_otp_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPObtainRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPObtainRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPObtainRequest'
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPObtain'
          description: ''
  /api/v1/auth/otp-devices/:
    get:
      operationId: auth_otp_devices_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOTPDeviceList'
          description: ''
    post:
      operationId: auth_otp_devices_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPDeviceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPDeviceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPDeviceRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPDevice'
          description: ''
  /api/v1/auth/otp-devices/{id}/:
    get:
      operationId: auth_otp_devices_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: type
        schema:
          type: string
        description: OTP Device type
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPDevice'
          description: ''
    delete:
      operationId: auth_otp_devices_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: type
        schema:
          type: string
        description: OTP Device type
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '204':
          description: No response body
  /api/v1/auth/otp-devices/{id}/confirm/:
    post:
      operationId: auth_otp_devices_confirm_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: type
        schema:
          type: string
        description: OTP Device type
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPDeviceConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPDeviceConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPDeviceConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          description: No response body
  /api/v1/auth/social/:
    post:
      operationId: auth_social_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/social/connect/:
    post:
      operationId: auth_social_connect_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialTokenObtainRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/token/:
    post:
      operationId: auth_token_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainRequest'
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/token/blacklist/:
    post:
      operationId: auth_token_blacklist_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklistRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/users/:
    post:
      operationId: auth_users_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentityRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserIdentityRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserIdentityRequest'
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentity'
          description: ''
  /api/v1/auth/users/{id}/:
    get:
      operationId: auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentity'
          description: ''
    patch:
      operationId: auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserIdentityRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserIdentityRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserIdentityRequest'
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentity'
          description: ''
  /api/v1/auth/users/{id}/set-password/:
    post:
      operationId: auth_users_set_password_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          description: No response body
  /api/v1/auth/users/{id}/two-fa/:
    get:
      operationId: auth_users_two_fa_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User2FA'
          description: ''
    patch:
      operationId: auth_users_two_fa_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser2FARequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser2FARequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser2FARequest'
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User2FA'
          description: ''
  /api/v1/chat/rooms/:
    get:
      operationId: chat_rooms_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - chat
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatRoomList'
          description: ''
    post:
      operationId: chat_rooms_create
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          description: ''
  /api/v1/chat/rooms/{id}/:
    get:
      operationId: chat_rooms_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          description: ''
    put:
      operationId: chat_rooms_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRoomRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          description: ''
    patch:
      operationId: chat_rooms_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatRoomRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatRoomRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatRoomRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoom'
          description: ''
    delete:
      operationId: chat_rooms_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '204':
          description: No response body
  /api/v1/chat/rooms/{id}/member/:
    post:
      operationId: chat_rooms_member_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRoomMembersRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatRoomMembersRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatRoomMembersRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomMembers'
          description: ''
  /api/v1/chat/rooms/{id}/members/:
    get:
      operationId: chat_rooms_members_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomMemberList'
          description: ''
  /api/v1/chat/rooms/{room_id}/messages/:
    get:
      operationId: chat_rooms_messages_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatMessageList'
          description: ''
    post:
      operationId: chat_rooms_messages_create
      parameters:
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
  /api/v1/chat/rooms/{room_id}/messages/{id}/:
    get:
      operationId: chat_rooms_messages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat message.
        required: true
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
          description: ''
    put:
      operationId: chat_rooms_messages_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat message.
        required: true
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatMessageUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
          description: ''
    patch:
      operationId: chat_rooms_messages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat message.
        required: true
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatMessageUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageUpdate'
          description: ''
    delete:
      operationId: chat_rooms_messages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chat message.
        required: true
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - chat
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '204':
          description: No response body
  /api/v1/notifications/action-categories/:
    get:
      operationId: notifications_action_categories_list
      tags:
      - notifications
      security:
      - jwtAuth: []
      - {}
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PushActionCategory'
          description: ''
  /api/v1/notifications/devices/:
    get:
      operationId: notifications_devices_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserDeviceList'
          description: ''
    post:
      operationId: notifications_devices_create
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
          description: ''
  /api/v1/notifications/devices/{registration_id}/:
    get:
      operationId: notifications_devices_retrieve
      parameters:
      - in: path
        name: registration_id
        schema:
          type: string
          title: Registration token
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
          description: ''
    put:
      operationId: notifications_devices_update
      parameters:
      - in: path
        name: registration_id
        schema:
          type: string
          title: Registration token
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDeviceRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
          description: ''
    patch:
      operationId: notifications_devices_partial_update
      parameters:
      - in: path
        name: registration_id
        schema:
          type: string
          title: Registration token
        required: true
      tags:
      - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDeviceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDeviceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDeviceRequest'
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
          description: ''
    delete:
      operationId: notifications_devices_destroy
      parameters:
      - in: path
        name: registration_id
        schema:
          type: string
          title: Registration token
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '204':
          description: No response body
  /api/v1/remoteconfig/:
    get:
      operationId: remoteconfig_retrieve
      parameters:
      - in: query
        name: params
        schema:
          type: object
          additionalProperties: {}
        description: json-encoded object of attribute key value pairs
        explode: true
      - in: query
        name: part
        schema:
          type: string
          enum:
          - app_launch
          - default
          - legal
        description: Name of the configuration part.
        required: true
      tags:
      - remoteconfig
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConfig'
          description: ''
components:
  schemas:
    ActionEnum:
      enum:
      - add
      - remove
      type: string
      description: |-
        * `add` - add
        * `remove` - remove
    ChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password
      - old_password
    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        chat_room:
          type: integer
        created_by:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        message:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - message
    ChatMessageRequest:
      type: object
      properties:
        chat_room:
          type: integer
        message:
          type: string
          minLength: 1
      required:
      - message
    ChatMessageUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        message:
          type: string
        chat_room:
          type: integer
          readOnly: true
        created_by:
          type: integer
          readOnly: true
      required:
      - message
    ChatMessageUpdateRequest:
      type: object
      properties:
        message:
          type: string
          minLength: 1
      required:
      - message
    ChatRoom:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 128
        created:
          type: string
          format: date-time
          readOnly: true
        chat_type:
          $ref: '#/components/schemas/ChatTypeEnum'
        newest_message:
          type: string
          readOnly: true
      required:
      - title
    ChatRoomMemberList:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
    ChatRoomMembers:
      type: object
      properties:
        users:
          type: array
          items:
            type: integer
        action:
          $ref: '#/components/schemas/ActionEnum'
      required:
      - action
      - users
    ChatRoomMembersRequest:
      type: object
      properties:
        users:
          type: array
          items:
            type: integer
        action:
          $ref: '#/components/schemas/ActionEnum'
      required:
      - action
      - users
    ChatRoomRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 128
        chat_type:
          $ref: '#/components/schemas/ChatTypeEnum'
        users:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
      required:
      - title
      - users
    ChatTypeEnum:
      enum:
      - group
      - private
      type: string
      description: |-
        * `group` - Group Chat
        * `private` - Private Chat
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        field:
          type: string
      required:
      - code
      - message
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      required:
      - errors
    OTPDevice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          $ref: '#/components/schemas/OTPDeviceTypeEnum'
        confirmed:
          type: boolean
          readOnly: true
        extra_data:
          type: object
          additionalProperties:
            type: string
          readOnly: true
      required:
      - type
    OTPDeviceConfirmRequest:
      type: object
      properties:
        otp:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - otp
    OTPDeviceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        type:
          $ref: '#/components/schemas/OTPDeviceTypeEnum'
      required:
      - type
    OTPDeviceTypeEnum:
      enum:
      - email
      - totp
      - sms
      type: string
      description: |-
        * `email` - email
        * `totp` - totp
        * `sms` - sms
    OTPObtain:
      type: object
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
    OTPObtainRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
        redirect_path:
          type: string
          writeOnly: true
          minLength: 1
    PaginatedChatMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
    PaginatedChatRoomList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatRoom'
    PaginatedOTPDeviceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/OTPDevice'
    PaginatedUserDeviceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserDevice'
    PatchedChatMessageUpdateRequest:
      type: object
      properties:
        message:
          type: string
          minLength: 1
    PatchedChatRoomRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 128
        chat_type:
          $ref: '#/components/schemas/ChatTypeEnum'
        users:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
    PatchedUser2FARequest:
      type: object
      properties:
        is_required:
          type: boolean
    PatchedUserDeviceRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        registration_id:
          type: string
          minLength: 1
          title: Registration token
        device_id:
          type: string
          nullable: true
          description: Unique device identifier
          maxLength: 255
        active:
          type: boolean
          default: true
          title: Is active
          description: Inactive devices will not be sent notifications
        type:
          $ref: '#/components/schemas/UserDeviceTypeEnum'
    PatchedUserIdentityRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
    ProviderEnum:
      enum:
      - google-oauth2
      type: string
      description: '* `google-oauth2` - google-oauth2'
    PushAction:
      type: object
      properties:
        name:
          type: string
          title: Id
          maxLength: 64
        button_text:
          type: string
          maxLength: 64
        authentication_required:
          type: boolean
        destructive:
          type: boolean
        foreground:
          type: boolean
      required:
      - button_text
      - name
    PushActionCategory:
      type: object
      properties:
        name:
          type: string
          title: Id
          maxLength: 64
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PushAction'
      required:
      - actions
      - name
    RemoteConfig:
      type: object
      properties:
        part:
          type: object
          additionalProperties: {}
      required:
      - part
    SocialTokenObtainRequest:
      type: object
      properties:
        access_token:
          type: string
          writeOnly: true
          minLength: 1
        provider:
          $ref: '#/components/schemas/ProviderEnum'
        otp:
          type: string
          writeOnly: true
      required:
      - access_token
      - provider
    Token:
      type: object
      properties:
        token:
          type: string
          readOnly: true
    TokenBlacklistRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenObtainRequest:
      type: object
      properties:
        otp:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
          writeOnly: true
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    User2FA:
      type: object
      properties:
        is_required:
          type: boolean
    UserDevice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        registration_id:
          type: string
          title: Registration token
        device_id:
          type: string
          nullable: true
          description: Unique device identifier
          maxLength: 255
        active:
          type: boolean
          default: true
          title: Is active
          description: Inactive devices will not be sent notifications
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          title: Creation date
        type:
          $ref: '#/components/schemas/UserDeviceTypeEnum'
      required:
      - registration_id
      - type
    UserDeviceRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        registration_id:
          type: string
          minLength: 1
          title: Registration token
        device_id:
          type: string
          nullable: true
          description: Unique device identifier
          maxLength: 255
        active:
          type: boolean
          default: true
          title: Is active
          description: Inactive devices will not be sent notifications
        type:
          $ref: '#/components/schemas/UserDeviceTypeEnum'
      required:
      - registration_id
      - type
    UserDeviceTypeEnum:
      enum:
      - ios
      - android
      - web
      type: string
      description: |-
        * `ios` - ios
        * `android` - android
        * `web` - web
    UserIdentity:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    UserIdentityRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
    UserRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

